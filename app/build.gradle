apply plugin: 'com.android.application'
apply plugin: 'crashlytics'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.neenbedankt.android-apt'

android {
    compileSdkVersion appCompileSdkVersion
    buildToolsVersion appBuildToolsVersion

    defaultConfig {
        applicationId "org.cryse.lkong"
        minSdkVersion appMinSdkVersion
        targetSdkVersion appTargetSdkVersion
        versionCode appVersionCode
        versionName appVersionName
    }

    compileOptions {
        encoding 'UTF-8'
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        debug {}
        release {}
    }

    buildTypes {
        debug {
            debuggable true
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/MANIFEST.MF'
    }
}

dependencies {
    compile "com.android.support:support-v13:$supportlibraryVersion"
    compile "com.android.support:design:$supportlibraryVersion"
    compile "com.android.support:appcompat-v7:$supportlibraryVersion"
    compile "com.android.support:recyclerview-v7:$supportlibraryVersion"
    compile "com.android.support:cardview-v7:$supportlibraryVersion"
    compile project(':utils')
    compile project(':widgets')
    compile project(':changelog')
    // compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.umeng.analytics:analytics:5.5.3'
    compile files('libs/umeng-update-v2.5.0.jar')
    retrolambdaConfig "net.orfjackal.retrolambda:retrolambda:$retroLambdaVersion"
    compile 'com.google.dagger:dagger:2.0'
    apt 'com.google.dagger:dagger-compiler:2.0'
    provided 'javax.annotation:jsr250-api:1.0'
    compile 'com.jakewharton:butterknife:6.1.0'
    // ReactiveX
    compile 'io.reactivex:rxjava:1.0.11'
    compile 'io.reactivex:rxandroid:0.24.0'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.4.0'
    compile 'com.squareup.okhttp:okhttp:2.4.0'
    compile 'com.google.code.gson:gson:2.3.1'
    compile 'com.nispok:snackbar:2.10.9'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.jakewharton.timber:timber:3.1.0'
    compile 'org.jsoup:jsoup:1.8.2'
    compile 'com.afollestad:material-dialogs:0.7.4.2'
    compile 'com.melnykov:floatingactionbutton:1.3.0'
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'org.apache.tika:tika-core:1.8'
    compile 'com.crashlytics.android:crashlytics:1.+'
    compile 'com.davemorrissey.labs:subsampling-scale-image-view:3.1.3'
    provided 'de.twentyeleven.skysail:org.ccil.cowan.tagsoup-osgi:1.2.1'
    compile('com.mikepenz:materialdrawer:3.0.6') {
        transitive = true
    }
    compile 'com.malinskiy:superrecyclerview:1.1.0'
}

retrolambda {
    jdk System.getenv('JAVA8_HOME')
    oldJdk System.getenv('JAVA7_HOME')
    javaVersion JavaVersion.VERSION_1_7
    jvmArgs '-noverify'
}

def Properties props = new Properties()
def propFile = new File('app/signing.properties')
if (propFile.canRead()){
    props.load(new FileInputStream(propFile))

    if (props!=null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.debug.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.debug.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.debug.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.debug.keyPassword = props['KEY_PASSWORD']
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        println 'signing.properties found but some entries are missing'
        android.buildTypes.debug.signingConfig = null
        android.buildTypes.release.signingConfig = null
    }
} else {
    println 'signing.properties not found'
    android.buildTypes.debug.signingConfig = null
    android.buildTypes.release.signingConfig = null
}