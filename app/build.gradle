apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'realm-android'
apply plugin: 'io.fabric'

android {
    compileSdkVersion appCompileSdkVersion
    buildToolsVersion appBuildToolsVersion

    defaultConfig {
        applicationId "org.cryse.lkong"
        minSdkVersion appMinSdkVersion
        targetSdkVersion appTargetSdkVersion
        versionCode appVersionCode
        versionName appVersionName
    }

    dexOptions { jumboMode = true }

    compileOptions {
        encoding 'UTF-8'
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        debug {}
        release {}
    }

    buildTypes {
        debug {
            debuggable true
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        playStore {
            resValue 'string', 'track_channel_name', 'playStore'
            buildConfigField "boolean", "InAppUpdate", "true"
        }
    }

    lintOptions {
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }
}

dependencies {
    // compile libDependencies.multidex
    compile libDependencies.support_v13
    compile libDependencies.design
    compile libDependencies.appcompat
    compile libDependencies.recyclerview
    compile libDependencies.cardview

    compile libDependencies.easypermission
    compile libDependencies.gson
    compile libDependencies.okhttp

    compile libDependencies.rxjava
    compile libDependencies.rxandroid
    compile libDependencies.butterknife

    compile libDependencies.timber

    compile libDependencies.finestwebview

    compile(libDependencies.materialdrawer) {
        transitive = true
    }

    compile(libDependencies.materialdialog) {
        transitive = true
    }

    compile(libDependencies.materialdialog_commons) {
        transitive = true
    }

    compile(libDependencies.fastScroller) {
        transitive = true
    }

    compile project(':app-theme-engine')

    compile(libDependencies.textdrawable) {
        transitive = true
    }

    compile (libDependencies.pulltorefresh) {
        exclude module: 'support-v4'
    }

    // compile fileTree(dir: 'libs', include: ['*.jar'])
    compile libDependencies.play_services_analytics
    compile libDependencies.umeng_analytics
    retrolambdaConfig libDependencies.retorlambda
    compile libDependencies.dagger
    apt libDependencies.dagger_compiler
    provided libDependencies.jsr250_api

    compile libDependencies.glide
    compile libDependencies.jsoup
    compile libDependencies.fab
    compile libDependencies.subsampling_scale_image_view
    provided libDependencies.tagsoup_osgi
    compile(libDependencies.crashlytics) {
        transitive = true;
    }
    compile libDependencies.persistentsearchview

    compile files('libs/umeng-update-v2.6.0.1.jar')
}

retrolambda {
    jdk System.getenv('JAVA8_HOME')
    oldJdk System.getenv('JAVA7_HOME')
    javaVersion JavaVersion.VERSION_1_7
    defaultMethods false
    incremental true
}

dexcount {
    includeClasses = false
    includeFieldCount = true
    includeTotalMethodCount = false
    printAsTree = false
    orderByMethodCount = false
    verbose = false
}

def Properties props = new Properties()
def propFile = new File('app/signing.properties')
if (propFile.canRead()){
    props.load(new FileInputStream(propFile))

    if (props!=null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.debug.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.debug.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.debug.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.debug.keyPassword = props['KEY_PASSWORD']
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        println 'signing.properties found but some entries are missing'
        android.buildTypes.debug.signingConfig = null
        android.buildTypes.release.signingConfig = null
    }
} else {
    println 'signing.properties not found'
    android.buildTypes.debug.signingConfig = null
    android.buildTypes.release.signingConfig = null
}


apply plugin: 'com.google.gms.google-services'